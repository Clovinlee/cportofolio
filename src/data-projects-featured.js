export var data_projects_featured = [
    {
        name : "Study of Explainable Artificial Intelligence (XAI) Using Model Agnostic Method SHAP for Regression",
        date: 2024,
        type: "Undergraduate Thesis",
        platform:"globe",
        description:"This is my thesis project. The project is about the study of Explainable Artificial Intelligence using Model Agnostic Method SHAP for Regression. The project was made using python as its primary tool.",
        frontend:["The frontend of the project is made using streamlit library. The frontend has two different page consist of model & data initialization, and SHAP visualization output as the second page."],
        backend: ["The backend consist of data preprocess, model, and  SHAP explanation model training. The project uses python as its main tool with data science library such as pandas, numpy, matplotlib, etc."],
        github:[
            {"Main Repo":"https://github.com/Clovinlee/shap_dashboard"}
        ],
        images : ["ta1.png","ta2.png","ta3.png","ta4.png","ta5.png","ta6.png"],
        tags: ["Web", "Python", "Streamlit", "SHAP"],
    },
    {
        date: 2023,
        type:"Internship",
        name : "Marble and Granite Mobile App with Laravel and Flutter",
        platform:"mobile",
        description : "Mobile application for granite and marble company. App consist of 3 another app, separated by role. The app was made with flutter, and laravel with PHP as the back end using REST API and JWT concept. The app is used for sales, tracking, and cataloging. The application consist of numerous CRUD process, authorization, pagination with lazy loading, database management (triggers, and pro func), validation, and image request.",
        features:[
            "Product Catalogue with Lazy Load and Filters",
            "Numerous Forms & Validations",
            "Sales Item Booking",
            "Sales Attendance",
            "Customer Item Booking",
            "Customer Item Tracking",
            "Driver Item Track Update",
            "Sales Attendance",
        ],
        frontend:["The frontend is made using flutter with dart as the main language. The app has 3 different role with different feature. The application is made with reactivity and state management in mind. The state management used was getx package. The app uses multiple library, such as shimmer for lazy loading, pull to refresh, charts, and etc."],
        backend:["Backend uses laravel as its main framework with PHP as the main language. The backend has numerous CRUD and validations with request and response handling. The backend uses JWT concept for user authentication and authorization. The backend also handle image upload from the mobile device to the server. The backend also consist of multiple database triggers and procedure functions."],
        images : ["brescia_catalog.png","brescia_penawaran1.png","brescia_penawaran2.png","brescia_penawaran3.png","brescia_pengiriman.png","brescia_sales.png","brescia_tracking.png"],
        database: "The database used was Server MySQL",
        tags: ["Mobile", "Flutter", "Dart", "Laravel", "MySQL", "REST API"],
    },
    {
        date: 2024,
        type:"Personal",
        name : "Go Backend with User Authorization",
        platform:"globe",
        description:"CRUD Backend Application as REST API using Go Gin with Authorization using JWT Concept.",
        features: [
            "REST API",
            "User Authentication",
            "JWT",
            "CRUD",
        ],
        frontend:[],
        backend:["The backend is made using Go as the main language, gin as the main framework, and GORM as the ORM of the backend. The application has full CRUD functionality with user registration, logout, authentication, and authorization using JWT concept. The application also has automated testing feature using Go test package for integration test."],
        database:"The database used was Postgres from supabase.",
        github:[
            {"Main Repo":"https://github.com/Clovinlee/golang-playground"},
        ],
        images : ["golang_backend1.png"],
        tags: ["Web", "Rest API", "GoLang", "Gin","Gorm", "Postgres", "Testing"],
    },
    {
        name : "E Commerce Mock Up using NestJS, GO, Spring and VUE",
        date: 2024,
        type:"Personal",
        platform:"globe",
        description:"A mockup catalogue part of E-commerce website with advanced queries and filters using 3 interchangeable backend: NestJS, Go Gin, Java Springboot.",
        features:[
            "REST API (& Guards)",
            "State Management (Loading - Fetch - Error)",
            "Form Validations",
            "Lazy Loading & Pagination",
            "Advanced Queries & Filters",
            "Multiple Backend",
            "User Authentication (Register, Login, Role)",
            "JWT Auth - Refresh (\"Best Practice\" Implementation)",
        ],
        frontend:["The frontend is made using Vue3 with Vuetify as the main framework. The filters and queries was achieved by using multiple options as checkbox, chips, and search bar. The application also has pagination feature with lazy loading using shimmer. The page was made with reactivity in mind."],
        backendTitle: ["NESTJS BACKEND", "JAVA BACKEND","GO BACKEND"],
        backend:[" The first backend is made using NestJS with Prisma as the ORM and TS as the main language. This backend (NestJS) has implemented authentication using JWT concept with refresh token using best-practice method. Other than that, the backend has same feature as the other two backend. (lazy-loading, pagination, advanced filtering and queries)",
        "The second backend is made using Java with Spring as the main framework and JPA for the ORM. The backend was made using MVC-Repository pattern with DI (managed by spring). The backend uses criteria, and query builder to chain queries into advanced queries and filters. The backend also uses pageable with custom DTO to return similar response as other backend.",
        "The third backend is made using GoLang with Gin as the main framework and GORM as the ORM. The backend uses MVC-Repository pattern with DI practice. The backend uses query builder to achieve advanced search and filter, along with pagination as the response."],
        database:"The database used was Postgres from supabase for both backend.",
        github:[
            {"NestJS Repo":"https://github.com/Clovinlee/cmarket_backend_nest"},
            {"Frontend Repo":"https://github.com/Clovinlee/cmarket"},
            {"Java Repo":"https://github.com/Clovinlee/cmarket_backend_spring"},
            {"Go Repo":"https://github.com/Clovinlee/cmarket_backend"},
        ],
        images : ["cmarket1.png","cmarket2.png","cmarket3.png","cmarket4.png","cmarket5.png","cmarket6.png","cmarket7.png","cmarket8.png","cmarket9.png","cmarket10.png","cmarket_register_sequence_diagram.png","cmarket_login_sequence_diagram.png","cmarket_jwt_sequence_diagram.png"],
        tags: ["Web", "Rest API", "GoLang", "Gin", "Gorm", "TS", "NestJS", "Postgres", "Vue", "Vuetify"],
    },
];
